{"ast":null,"code":"var _jsxFileName = \"/home/ethanh/Desktop/1.1.2010s-heardle/src/components/Player.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport YouTube from 'react-youtube';\nimport useGlobal from '../hooks/useGlobal';\nimport ProgressBar from './ProgressBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst OPTS = {\n  width: \"0\",\n  height: \"0\"\n};\nconst Player = _ref => {\n  _s();\n  let {\n    guessNum,\n    startOffset,\n    isPlaying,\n    setIsPlaying\n  } = _ref;\n  const playerRef = useRef();\n  const [timeoutID, setTimeoutID] = useState();\n  const [timeStarted, setTimeStarted] = useState(new Date());\n  const [duration, setDuration] = useState(16);\n  const {\n    CORRECT_SONG\n  } = useGlobal();\n\n  //handles song having been played for allocated time\n  const onTimeout = () => {\n    setIsPlaying(false);\n    playerRef.current.internalPlayer.pauseVideo();\n  };\n  const getGuessTime = gn => {\n    //returns guess-time for corresponding guess num in ms\n    return (1 + gn * (gn + 1) / 2) * 1000;\n  };\n  useEffect(() => {\n    //forces song to load\n    playerRef.current.internalPlayer.playVideo();\n    //playerRef.current.internalPlayer.pauseVideo();\n\n    playerRef.current.internalPlayer.setVolume(100);\n  }, []);\n\n  //handles play/pausing of player\n  useEffect(() => {\n    if (!playerRef.current) return;\n    if (isPlaying) {\n      playerRef.current.internalPlayer.seekTo(startOffset);\n      playerRef.current.internalPlayer.playVideo();\n      setTimeoutID(setTimeout(onTimeout, getGuessTime(guessNum))); //guess time secs -> ms\n      setTimeStarted(new Date());\n    } else {\n      playerRef.current.internalPlayer.pauseVideo();\n      clearTimeout(timeoutID);\n      console.log(`time left: ${timeoutID}`);\n    }\n  }, [isPlaying]);\n  useEffect(() => {\n    if (guessNum !== undefined) return;\n    const getDuration = (async () => {\n      const durationPromise = playerRef.current.internalPlayer.getDuration();\n      durationPromise.then(d => setDuration(Math.floor(d - CORRECT_SONG.offset)));\n      console.log(playerRef.current.internalPlayer);\n    })();\n\n    //playerRef.current.internalPlayer.getDuration().then(d => console.log(d));\n  }, [playerRef]);\n\n  //handles when the user skips while the song is playing (so keeps playing until new time slot)\n  useEffect(() => {\n    if (guessNum == 0) return; //when guessNum is first set\n    clearTimeout(timeoutID);\n    let timeRemaining = getGuessTime(guessNum) - (new Date() - timeStarted);\n    console.log(new Date() - timeStarted);\n    setTimeoutID(setTimeout(onTimeout, timeRemaining));\n  }, [guessNum]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      isPlaying: isPlaying,\n      guessNum: guessNum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      opts: OPTS,\n      videoId: CORRECT_SONG.id,\n      onReady: () => console.log(\"READY\"),\n      ref: playerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Player, \"CzYbP8CCGuIDHpifhLIBk1kPJmo=\", false, function () {\n  return [useGlobal];\n});\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useEffect","useRef","YouTube","useGlobal","ProgressBar","OPTS","width","height","Player","guessNum","startOffset","isPlaying","setIsPlaying","playerRef","timeoutID","setTimeoutID","timeStarted","setTimeStarted","Date","duration","setDuration","CORRECT_SONG","onTimeout","current","internalPlayer","pauseVideo","getGuessTime","gn","playVideo","setVolume","seekTo","setTimeout","clearTimeout","console","log","undefined","getDuration","durationPromise","then","d","Math","floor","offset","timeRemaining","id"],"sources":["/home/ethanh/Desktop/1.1.2010s-heardle/src/components/Player.js"],"sourcesContent":["import React, { useState,useEffect, useRef } from 'react'\nimport YouTube from 'react-youtube';\nimport useGlobal from '../hooks/useGlobal';\nimport ProgressBar from './ProgressBar';\n\nconst OPTS = {width: \"0\", height:\"0\"}\n\nconst Player = ({guessNum, startOffset, isPlaying, setIsPlaying}) => {\n  const playerRef = useRef()\n  const [timeoutID, setTimeoutID] = useState()\n  const [timeStarted, setTimeStarted] = useState(new Date())\n  const [duration, setDuration] = useState(16)\n\n  const {CORRECT_SONG} = useGlobal();\n\n  //handles song having been played for allocated time\n  const onTimeout = () =>{\n    setIsPlaying(false);\n    playerRef.current.internalPlayer.pauseVideo();\n  }\n\n  const getGuessTime = (gn) =>{ //returns guess-time for corresponding guess num in ms\n    return (1 + gn*(gn+1)/2) * 1000\n  }\n  \n  useEffect(()=>{\n    //forces song to load\n    playerRef.current.internalPlayer.playVideo();\n    //playerRef.current.internalPlayer.pauseVideo();\n\n    playerRef.current.internalPlayer.setVolume(100);\n  },[])\n\n  //handles play/pausing of player\n  useEffect(()=>{\n    if(!playerRef.current) return\n    if(isPlaying){\n      playerRef.current.internalPlayer.seekTo(startOffset);\n      playerRef.current.internalPlayer.playVideo();\n      setTimeoutID(setTimeout(onTimeout,getGuessTime(guessNum))) //guess time secs -> ms\n      setTimeStarted(new Date())\n    } else{\n      playerRef.current.internalPlayer.pauseVideo();\n      clearTimeout(timeoutID)\n      console.log(`time left: ${timeoutID}`)\n    }\n  },[isPlaying])\n\n  useEffect(()=>{\n    if(guessNum !== undefined) return;\n    const getDuration = (async() =>{\n        const durationPromise = playerRef.current.internalPlayer.getDuration()\n        durationPromise.then((d)=>setDuration(Math.floor(d - CORRECT_SONG.offset)))\n        console.log(playerRef.current.internalPlayer)\n    })();\n            \n    \n    //playerRef.current.internalPlayer.getDuration().then(d => console.log(d));\n\n  },[playerRef])\n\n\n  //handles when the user skips while the song is playing (so keeps playing until new time slot)\n  useEffect(()=>{\n    if(guessNum == 0) return //when guessNum is first set\n    clearTimeout(timeoutID);\n    let timeRemaining = getGuessTime(guessNum) - ((new Date()) - timeStarted);\n    console.log((new Date()) - timeStarted);\n    setTimeoutID(setTimeout(onTimeout,timeRemaining))\n  }, [guessNum])\n\n  return (\n    <>\n      <ProgressBar isPlaying={isPlaying} guessNum={guessNum} />\n      <YouTube opts={OPTS} videoId={CORRECT_SONG.id} onReady={()=>console.log(\"READY\")} ref={playerRef}/>\n    </>\n    )\n}\n\nexport default Player"],"mappings":"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"},"metadata":{},"sourceType":"module"}