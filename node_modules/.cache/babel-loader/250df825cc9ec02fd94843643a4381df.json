{"ast":null,"code":"var _jsxFileName = \"/home/ethanh/Desktop/WORKING_TIMER_2010s_Heardle/src/components/Player.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport useGlobal from '../hooks/useGlobal';\nimport ProgressBar from './ProgressBar';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircleStop, faCirclePlay } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Player = _ref => {\n  _s();\n  let {\n    guessNum\n  } = _ref;\n  const [timeoutID, setTimeoutID] = useState();\n  const [timeStarted, setTimeStarted] = useState(new Date());\n  const [duration, setDuration] = useState(16);\n  const {\n    CORRECT_SONG,\n    isPlaying,\n    setIsPlaying,\n    playerRef,\n    setHasPlayedToday\n  } = useGlobal();\n\n  //handles song having been played for allocated time\n\n  const stopSong = () => {\n    clearTimeout(timeoutID);\n    setIsPlaying(false);\n    playerRef.current.internalPlayer.pauseVideo();\n    playerRef.current.internalPlayer.seekTo(CORRECT_SONG.offset);\n  };\n  const playSong = () => {\n    playerRef.current.internalPlayer.playVideo();\n  };\n  //guess of \"X\" corresponds to failure to guess\n  const updateStats = g => {\n    const stats = JSON.parse(localStorage.getItem(\"scores\"));\n    stats[g] += 1;\n    localStorage.setItem(\"scores\", JSON.stringify(stats));\n  };\n\n  /*\n    useEffect(() => {\n      console.log(timeoutID)\n    }, [timeoutID])\n    */\n  const getGuessTime = gn => {\n    //returns guess-time for corresponding guess num in ms\n    return (1 + gn * (gn + 1) / 2) * 1000;\n  };\n  const onPlayClicked = () => {\n    if (!isPlaying) {\n      // play\n      playSong();\n      return;\n    }\n    //stop song\n    stopSong();\n  };\n  useEffect(() => {\n    playerRef.current.internalPlayer.setVolume(100);\n    playerRef.current.internalPlayer.seekTo(CORRECT_SONG.offset);\n    return () => {\n      playerRef.current.internalPlayer.seekTo(CORRECT_SONG.offset);\n    };\n  }, []);\n  useEffect(() => {\n    if (guessNum !== undefined) return;\n    const getDuration = (async () => {\n      const durationPromise = playerRef.current.internalPlayer.getDuration();\n      durationPromise.then(d => {\n        setDuration(Math.floor(d - CORRECT_SONG.offset));\n      });\n    })();\n  }, [playerRef]);\n  useEffect(() => {\n    if (!isPlaying) return;\n  }, [isPlaying]);\n\n  //handles when the user skips while the song is playing (so keeps playing until new time slot)\n  useEffect(() => {\n    if (guessNum == 0 || guessNum == undefined || !isPlaying) return; //when guessNum is first set\n    clearTimeout(timeoutID);\n    if (guessNum > 5) return;\n    let timeRemaining = getGuessTime(guessNum) - (new Date() - timeStarted);\n    setTimeoutID(setTimeout(stopSong, timeRemaining));\n  }, [guessNum]);\n  useEffect(() => {\n    if (guessNum > 5) {\n      clearTimeout(timeoutID);\n      setIsPlaying(true); //so autoplays\n      setHasPlayedToday(true);\n      updateStats(\"X\");\n    }\n  }, [guessNum]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      isPlaying: isPlaying,\n      guessNum: guessNum,\n      duration: duration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"play-btn\",\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: isPlaying ? faCircleStop : faCirclePlay,\n        id: \"play-icon\",\n        onClick: onPlayClicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Player, \"ie/z53Z1eA2Hn9D+SvSYrvTNAb0=\", false, function () {\n  return [useGlobal];\n});\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useGlobal","ProgressBar","FontAwesomeIcon","faCircleStop","faCirclePlay","Player","guessNum","timeoutID","setTimeoutID","timeStarted","setTimeStarted","Date","duration","setDuration","CORRECT_SONG","isPlaying","setIsPlaying","playerRef","setHasPlayedToday","stopSong","clearTimeout","current","internalPlayer","pauseVideo","seekTo","offset","playSong","playVideo","updateStats","g","stats","JSON","parse","localStorage","getItem","setItem","stringify","getGuessTime","gn","onPlayClicked","setVolume","undefined","getDuration","durationPromise","then","d","Math","floor","timeRemaining","setTimeout"],"sources":["/home/ethanh/Desktop/WORKING_TIMER_2010s_Heardle/src/components/Player.js"],"sourcesContent":["import React, { useState,useEffect, useRef } from 'react'\nimport useGlobal from '../hooks/useGlobal';\nimport ProgressBar from './ProgressBar';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircleStop, faCirclePlay } from '@fortawesome/free-solid-svg-icons';\n\nconst Player = ({guessNum}) => {\n  const [timeoutID, setTimeoutID] = useState()\n  const [timeStarted, setTimeStarted] = useState(new Date())\n  const [duration, setDuration] = useState(16)\n\n  const {CORRECT_SONG, isPlaying,setIsPlaying,playerRef, setHasPlayedToday} = useGlobal();\n\n  //handles song having been played for allocated time\n  \n  \n  const stopSong = () => {\n\n    clearTimeout(timeoutID);\n    setIsPlaying(false);\n    playerRef.current.internalPlayer.pauseVideo();\n    playerRef.current.internalPlayer.seekTo(CORRECT_SONG.offset);\n  }\n\n  const playSong = () =>{\n    playerRef.current.internalPlayer.playVideo();\n    \n  }\n //guess of \"X\" corresponds to failure to guess\n const updateStats = (g)=>{\n  const stats = JSON.parse(localStorage.getItem(\"scores\"))\n  stats[g] +=1\n  localStorage.setItem(\"scores\",JSON.stringify(stats));\n}\n\n\n/*\n  useEffect(() => {\n    console.log(timeoutID)\n  }, [timeoutID])\n  */\n  const getGuessTime = (gn) =>{ //returns guess-time for corresponding guess num in ms\n    return (1 + gn*(gn+1)/2)*1000 \n  }\n  \n  const onPlayClicked = () =>{\n    if(!isPlaying){ // play\n      playSong();\n      return\n    }\n    //stop song\n    stopSong();\n    \n  }\n  \n  useEffect(()=>{\n    playerRef.current.internalPlayer.setVolume(100);\n    playerRef.current.internalPlayer.seekTo(CORRECT_SONG.offset);\n\n    return () => {\n      playerRef.current.internalPlayer.seekTo(CORRECT_SONG.offset)\n    }\n  },[])\n  \n  useEffect(()=>{\n    if(guessNum !== undefined) return;\n    const getDuration = (async() =>{\n        const durationPromise = playerRef.current.internalPlayer.getDuration()\n        durationPromise.then((d)=>{\n          setDuration(Math.floor(d - CORRECT_SONG.offset))\n        }\n    )})();\n\n  },[playerRef])\n \n  useEffect(() =>{\n    if (!isPlaying) return;\n\n  }, [isPlaying])\n\n  //handles when the user skips while the song is playing (so keeps playing until new time slot)\n  useEffect(()=>{\n    if(guessNum == 0 || guessNum == undefined || !isPlaying) return //when guessNum is first set\n    clearTimeout(timeoutID);\n\n    if(guessNum > 5) return\n    let timeRemaining = getGuessTime(guessNum) - ((new Date()) - timeStarted);\n    setTimeoutID(setTimeout(stopSong,timeRemaining))\n  }, [guessNum])\n\n  useEffect(()=>{\n    if(guessNum > 5) \n    {\n      clearTimeout(timeoutID);\n      \n      setIsPlaying(true) //so autoplays\n      setHasPlayedToday(true)\n      updateStats(\"X\")\n    }\n  },[guessNum])\n\n\n  return (\n    <>\n      <ProgressBar isPlaying={isPlaying} guessNum={guessNum} duration={duration}/>\n      <button className=\"play-btn\">\n        <FontAwesomeIcon icon = {isPlaying? faCircleStop : faCirclePlay} id=\"play-icon\" onClick={onPlayClicked}/>\n      </button>\n    </>\n    )\n}\n\nexport default Player"],"mappings":"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"},"metadata":{},"sourceType":"module"}