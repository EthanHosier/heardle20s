{"ast":null,"code":"var _jsxFileName = \"/home/ethanh/Desktop/WORKING_TIMER_2010s_Heardle/src/components/Player.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport useGlobal from '../hooks/useGlobal';\nimport ProgressBar from './ProgressBar';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircleStop, faCirclePlay } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Player = _ref => {\n  _s();\n  let {\n    guessNum\n  } = _ref;\n  const [timeoutID, setTimeoutID] = useState();\n  const [timeStarted, setTimeStarted] = useState(new Date());\n  const [duration, setDuration] = useState(16);\n  const {\n    CORRECT_SONG,\n    isPlaying,\n    setIsPlaying,\n    playerRef,\n    setHasPlayedToday\n  } = useGlobal();\n\n  //handles song having been played for allocated time\n\n  /*\n  const stopSong = () => {\n    clearTimeout(timeoutID);\n    setIsPlaying(false);\n    playerRef.current.internalPlayer.pauseVideo();\n    playerRef.current.internalPlayer.seekTo(CORRECT_SONG.offset);\n    console.log(`Cleared: ${timeoutID}`)\n  }\n   const playSong = () =>{\n    playerRef.current.internalPlayer.playVideo();\n    let playFor = guessNum !== undefined? getGuessTime(guessNum):duration*1000\n    setTimeoutID(setTimeout(stopSong,playFor)) //guess time secs -> ms\n    console.log(\"set timeout\")\n    setTimeStarted(new Date())\n    setIsPlaying(true)\n  }\n  //guess of \"X\" corresponds to failure to guess\n  const updateStats = (g)=>{\n  const stats = JSON.parse(localStorage.getItem(\"scores\"))\n  stats[g] +=1\n  localStorage.setItem(\"scores\",JSON.stringify(stats));\n  }\n    useEffect(() => {\n    console.log(timeoutID)\n  }, [timeoutID])\n  \n  const getGuessTime = (gn) =>{ //returns guess-time for corresponding guess num in ms\n    return (1 + gn*(gn+1)/2)*1000 \n  }\n  \n  const onPlayClicked = () =>{\n    if(!isPlaying){ // play\n      playSong();\n      return\n    }\n    //stop song\n    stopSong();\n    \n  }\n  \n  useEffect(()=>{\n    console.log(\"mount\")\n    playerRef.current.internalPlayer.setVolume(100);\n     return () => {\n      playerRef.current.internalPlayer.seekTo(CORRECT_SONG.offset)\n    }\n  },[])\n  \n  \n    //handles when the user skips while the song is playing (so keeps playing until new time slot)\n  useEffect(()=>{\n    if(guessNum == 0 || guessNum == undefined || !isPlaying) return //when guessNum is first set\n    clearTimeout(timeoutID);\n    console.log(`Cleared: ${timeoutID}`)\n     let timeRemaining = getGuessTime(guessNum) - ((new Date()) - timeStarted);\n    setTimeoutID(setTimeout(stopSong,timeRemaining))\n    console.log(\"set timeout\")\n  }, [guessNum])\n   useEffect(()=>{\n    if(guessNum > 5) \n    {\n      clearTimeout(timeoutID);\n          console.log(`Cleared: ${timeoutID}`)\n       setIsPlaying(true) //so autoplays\n      setHasPlayedToday(true)\n      updateStats(\"X\")\n    }\n  },[guessNum])\n    */\n\n  const getGuessTime = gn => {\n    //returns guess-time for corresponding guess num in ms\n\n    return (1 + gn * (gn + 1) / 2) * 1000;\n  };\n  const [play, setPlay] = React.useState < boolean > false;\n  const [currentTime, setCurrentTime] = React.useState < number > 0;\n  const [isReady, setIsReady] = React.useState < boolean > false;\n  useEffect(() => {\n    if (guessNum !== undefined) return;\n    const getDuration = (async () => {\n      const durationPromise = playerRef.current.internalPlayer.getDuration();\n      durationPromise.then(d => {\n        setDuration(Math.floor(d - CORRECT_SONG.offset));\n      });\n    })();\n  }, [playerRef]);\n  React.useEffect(() => {\n    setInterval(() => {\n      var _playerRef$current;\n      (_playerRef$current = playerRef.current) === null || _playerRef$current === void 0 ? void 0 : _playerRef$current.internalPlayer.getCurrentTime().then(time => {\n        setCurrentTime(time);\n      });\n    }, 250);\n  }, []);\n  React.useEffect(() => {\n    if (play) {\n      if (currentTime * 1000 >= (guessNum !== undefined ? getGuessTime(guessNum) : duration * 1000)) {\n        var _playerRef$current2, _playerRef$current3;\n        (_playerRef$current2 = playerRef.current) === null || _playerRef$current2 === void 0 ? void 0 : _playerRef$current2.internalPlayer.pauseVideo();\n        (_playerRef$current3 = playerRef.current) === null || _playerRef$current3 === void 0 ? void 0 : _playerRef$current3.internalPlayer.seekTo(0);\n        setPlay(false);\n      }\n    }\n  }, [play, currentTime]);\n\n  // don't call play video each time currentTime changes\n  const startPlayback = React.useCallback(() => {\n    var _playerRef$current4;\n    (_playerRef$current4 = playerRef.current) === null || _playerRef$current4 === void 0 ? void 0 : _playerRef$current4.internalPlayer.playVideo();\n    setPlay(true);\n    event({\n      category: \"Player\",\n      action: \"Played song\"\n    });\n  }, []);\n  const setReady = React.useCallback(() => {\n    setIsReady(true);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      isPlaying: isPlaying,\n      guessNum: guessNum,\n      duration: duration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"play-btn\",\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: isPlaying ? faCircleStop : faCirclePlay,\n        id: \"play-icon\",\n        onClick: onPlayClicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Player, \"3Y7M+aLNCmMc2ek5izpL14KGs8I=\", false, function () {\n  return [useGlobal];\n});\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useGlobal","ProgressBar","FontAwesomeIcon","faCircleStop","faCirclePlay","Player","guessNum","timeoutID","setTimeoutID","timeStarted","setTimeStarted","Date","duration","setDuration","CORRECT_SONG","isPlaying","setIsPlaying","playerRef","setHasPlayedToday","getGuessTime","gn","play","setPlay","boolean","currentTime","setCurrentTime","number","isReady","setIsReady","undefined","getDuration","durationPromise","current","internalPlayer","then","d","Math","floor","offset","setInterval","getCurrentTime","time","pauseVideo","seekTo","startPlayback","useCallback","playVideo","event","category","action","setReady","onPlayClicked"],"sources":["/home/ethanh/Desktop/WORKING_TIMER_2010s_Heardle/src/components/Player.js"],"sourcesContent":["import React, { useState,useEffect, useRef } from 'react'\nimport useGlobal from '../hooks/useGlobal';\nimport ProgressBar from './ProgressBar';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircleStop, faCirclePlay } from '@fortawesome/free-solid-svg-icons';\n\nconst Player = ({guessNum}) => {\n  const [timeoutID, setTimeoutID] = useState()\n  const [timeStarted, setTimeStarted] = useState(new Date())\n  const [duration, setDuration] = useState(16)\n\n  const {CORRECT_SONG, isPlaying,setIsPlaying,playerRef, setHasPlayedToday} = useGlobal();\n\n  //handles song having been played for allocated time\n  \n  /*\n  const stopSong = () => {\n    clearTimeout(timeoutID);\n    setIsPlaying(false);\n    playerRef.current.internalPlayer.pauseVideo();\n    playerRef.current.internalPlayer.seekTo(CORRECT_SONG.offset);\n    console.log(`Cleared: ${timeoutID}`)\n  }\n\n  const playSong = () =>{\n    playerRef.current.internalPlayer.playVideo();\n    let playFor = guessNum !== undefined? getGuessTime(guessNum):duration*1000\n    setTimeoutID(setTimeout(stopSong,playFor)) //guess time secs -> ms\n    console.log(\"set timeout\")\n    setTimeStarted(new Date())\n    setIsPlaying(true)\n  }\n //guess of \"X\" corresponds to failure to guess\n const updateStats = (g)=>{\n  const stats = JSON.parse(localStorage.getItem(\"scores\"))\n  stats[g] +=1\n  localStorage.setItem(\"scores\",JSON.stringify(stats));\n}\n\n\n  useEffect(() => {\n    console.log(timeoutID)\n  }, [timeoutID])\n  \n  const getGuessTime = (gn) =>{ //returns guess-time for corresponding guess num in ms\n    return (1 + gn*(gn+1)/2)*1000 \n  }\n  \n  const onPlayClicked = () =>{\n    if(!isPlaying){ // play\n      playSong();\n      return\n    }\n    //stop song\n    stopSong();\n    \n  }\n  \n  useEffect(()=>{\n    console.log(\"mount\")\n    playerRef.current.internalPlayer.setVolume(100);\n\n    return () => {\n      playerRef.current.internalPlayer.seekTo(CORRECT_SONG.offset)\n    }\n  },[])\n  \n\n \n\n\n  //handles when the user skips while the song is playing (so keeps playing until new time slot)\n  useEffect(()=>{\n    if(guessNum == 0 || guessNum == undefined || !isPlaying) return //when guessNum is first set\n    clearTimeout(timeoutID);\n    console.log(`Cleared: ${timeoutID}`)\n\n    let timeRemaining = getGuessTime(guessNum) - ((new Date()) - timeStarted);\n    setTimeoutID(setTimeout(stopSong,timeRemaining))\n    console.log(\"set timeout\")\n  }, [guessNum])\n\n  useEffect(()=>{\n    if(guessNum > 5) \n    {\n      clearTimeout(timeoutID);\n          console.log(`Cleared: ${timeoutID}`)\n\n      setIsPlaying(true) //so autoplays\n      setHasPlayedToday(true)\n      updateStats(\"X\")\n    }\n  },[guessNum])\n\n\n  */\n\n  const getGuessTime = (gn) =>{ //returns guess-time for corresponding guess num in ms\n    \n    \n    return (1 + gn*(gn+1)/2)*1000 \n  }\n\n  \n  const [play, setPlay] = React.useState<boolean>(false);\n\n  const [currentTime, setCurrentTime] = React.useState<number>(0);\n\n  const [isReady, setIsReady] = React.useState<boolean>(false);\n\n\n  useEffect(()=>{\n    if(guessNum !== undefined) return;\n    const getDuration = (async() =>{\n        const durationPromise = playerRef.current.internalPlayer.getDuration()\n        durationPromise.then((d)=>{\n          setDuration(Math.floor(d - CORRECT_SONG.offset))\n        }\n    )})();\n\n  },[playerRef])\n\n\n  React.useEffect(() => {\n    setInterval(() => {\n      playerRef.current?.internalPlayer\n        .getCurrentTime()\n        .then((time) => {\n          setCurrentTime(time);\n        });\n    }, 250);\n  }, []);\n\n  React.useEffect(() => {\n    if (play) {\n      if (currentTime * 1000 >= (guessNum !== undefined? getGuessTime(guessNum):duration*1000)) {\n        playerRef.current?.internalPlayer.pauseVideo();\n        playerRef.current?.internalPlayer.seekTo(0);\n        setPlay(false);\n      }\n    }\n  }, [play, currentTime]);\n\n  // don't call play video each time currentTime changes\n  const startPlayback = React.useCallback(() => {\n    playerRef.current?.internalPlayer.playVideo();\n    setPlay(true);\n    event({\n      category: \"Player\",\n      action: \"Played song\",\n    });\n  }, []);\n\n  const setReady = React.useCallback(() => {\n    setIsReady(true);\n  }, []);\n\n\n  return (\n    <>\n      <ProgressBar isPlaying={isPlaying} guessNum={guessNum} duration={duration}/>\n      <button className=\"play-btn\">\n        <FontAwesomeIcon icon = {isPlaying? faCircleStop : faCirclePlay} id=\"play-icon\" onClick={onPlayClicked}/>\n      </button>\n    </>\n    )\n}\n\nexport default Player"],"mappings":"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"},"metadata":{},"sourceType":"module"}