{"ast":null,"code":"var _jsxFileName = \"/home/ethanh/Desktop/suitableForMobile.2010s-heardle/src/components/Player.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport YouTube from 'react-youtube';\nimport useGlobal from '../hooks/useGlobal';\nimport ProgressBar from './ProgressBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst OPTS = {\n  width: \"0\",\n  height: \"0\"\n};\nconst Player = _ref => {\n  _s();\n  let {\n    guessNum\n  } = _ref;\n  const playerRef = useRef();\n  const [timeoutID, setTimeoutID] = useState();\n  const [timeStarted, setTimeStarted] = useState(new Date());\n  const [duration, setDuration] = useState(16);\n  const {\n    CORRECT_SONG,\n    isPlaying,\n    setIsPlaying\n  } = useGlobal();\n\n  //handles song having been played for allocated time\n  const onTimeout = () => {\n    setIsPlaying(false);\n    playerRef.current.internalPlayer.pauseVideo();\n  };\n  const getGuessTime = gn => {\n    //returns guess-time for corresponding guess num in ms\n    return (1 + gn * (gn + 1) / 2) * 1000;\n  };\n  useEffect(() => {\n    //forces song to load\n    playerRef.current.internalPlayer.playVideo();\n    playerRef.current.internalPlayer.pauseVideo();\n    playerRef.current.internalPlayer.setVolume(100);\n  }, []);\n\n  //handles play/pausing of player\n  useEffect(() => {\n    if (!playerRef.current) return;\n    if (isPlaying) {\n      playerRef.current.internalPlayer.seekTo(CORRECT_SONG.offset);\n      playerRef.current.internalPlayer.playVideo();\n      let playFor = guessNum !== undefined ? getGuessTime(guessNum) : duration * 1000;\n      setTimeoutID(setTimeout(onTimeout, playFor)); //guess time secs -> ms\n      setTimeStarted(new Date());\n    } else {\n      playerRef.current.internalPlayer.pauseVideo();\n      clearTimeout(timeoutID);\n    }\n  }, [isPlaying]);\n  useEffect(() => {\n    if (guessNum !== undefined) return;\n    const getDuration = (async () => {\n      const durationPromise = playerRef.current.internalPlayer.getDuration();\n      durationPromise.then(d => {\n        setDuration(Math.floor(d - CORRECT_SONG.offset));\n      });\n    })();\n\n    //playerRef.current.internalPlayer.getDuration().then(d => console.log(d));\n  }, [playerRef]);\n\n  //handles when the user skips while the song is playing (so keeps playing until new time slot)\n  useEffect(() => {\n    if (guessNum == 0 || guessNum == undefined) return; //when guessNum is first set\n    clearTimeout(timeoutID);\n    let timeRemaining = getGuessTime(guessNum) - (new Date() - timeStarted);\n    setTimeoutID(setTimeout(onTimeout, timeRemaining));\n  }, [guessNum]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      isPlaying: isPlaying,\n      guessNum: guessNum,\n      duration: duration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      opts: OPTS,\n      videoId: CORRECT_SONG.id,\n      onReady: () => console.log(\"READY\"),\n      ref: playerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Player, \"N8TlftC8Ajt2aH61YnmfZXMBT1E=\", false, function () {\n  return [useGlobal];\n});\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useEffect","useRef","YouTube","useGlobal","ProgressBar","OPTS","width","height","Player","guessNum","playerRef","timeoutID","setTimeoutID","timeStarted","setTimeStarted","Date","duration","setDuration","CORRECT_SONG","isPlaying","setIsPlaying","onTimeout","current","internalPlayer","pauseVideo","getGuessTime","gn","playVideo","setVolume","seekTo","offset","playFor","undefined","setTimeout","clearTimeout","getDuration","durationPromise","then","d","Math","floor","timeRemaining","id","console","log"],"sources":["/home/ethanh/Desktop/suitableForMobile.2010s-heardle/src/components/Player.js"],"sourcesContent":["import React, { useState,useEffect, useRef } from 'react'\nimport YouTube from 'react-youtube';\nimport useGlobal from '../hooks/useGlobal';\nimport ProgressBar from './ProgressBar';\n\nconst OPTS = {width: \"0\", height:\"0\"}\n\nconst Player = ({guessNum}) => {\n  const playerRef = useRef()\n  const [timeoutID, setTimeoutID] = useState()\n  const [timeStarted, setTimeStarted] = useState(new Date())\n  const [duration, setDuration] = useState(16)\n\n  const {CORRECT_SONG, isPlaying,setIsPlaying} = useGlobal();\n\n  //handles song having been played for allocated time\n  const onTimeout = () =>{\n    setIsPlaying(false);\n    playerRef.current.internalPlayer.pauseVideo();\n  }\n\n  const getGuessTime = (gn) =>{ //returns guess-time for corresponding guess num in ms\n    return (1 + gn*(gn+1)/2)*1000 \n  }\n  \n  useEffect(()=>{\n    //forces song to load\n    playerRef.current.internalPlayer.playVideo();\n    playerRef.current.internalPlayer.pauseVideo();\n\n    playerRef.current.internalPlayer.setVolume(100);\n  },[])\n\n  //handles play/pausing of player\n  useEffect(()=>{\n    if(!playerRef.current) return\n    if(isPlaying){\n      playerRef.current.internalPlayer.seekTo(CORRECT_SONG.offset);\n      playerRef.current.internalPlayer.playVideo();\n      let playFor = guessNum !== undefined? getGuessTime(guessNum):duration*1000\n      setTimeoutID(setTimeout(onTimeout,playFor)) //guess time secs -> ms\n      setTimeStarted(new Date())\n    } else{\n      playerRef.current.internalPlayer.pauseVideo();\n      clearTimeout(timeoutID)\n    }\n  },[isPlaying])\n\n  useEffect(()=>{\n    if(guessNum !== undefined) return;\n    const getDuration = (async() =>{\n        const durationPromise = playerRef.current.internalPlayer.getDuration()\n        durationPromise.then((d)=>{\n          setDuration(Math.floor(d - CORRECT_SONG.offset))\n          }\n          )})();\n            \n    \n    //playerRef.current.internalPlayer.getDuration().then(d => console.log(d));\n\n  },[playerRef])\n\n\n  //handles when the user skips while the song is playing (so keeps playing until new time slot)\n  useEffect(()=>{\n    if(guessNum == 0 || guessNum == undefined) return //when guessNum is first set\n    clearTimeout(timeoutID);\n    let timeRemaining = getGuessTime(guessNum) - ((new Date()) - timeStarted);\n    setTimeoutID(setTimeout(onTimeout,timeRemaining))\n  }, [guessNum])\n\n  return (\n    <>\n      <ProgressBar isPlaying={isPlaying} guessNum={guessNum} duration={duration}/>\n      <YouTube opts={OPTS} videoId={CORRECT_SONG.id} onReady={()=>console.log(\"READY\")} ref={playerRef}/>\n    </>\n    )\n}\n\nexport default Player"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAACC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzD,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,WAAW,MAAM,eAAe;AAAC;AAAA;AAExC,MAAMC,IAAI,GAAG;EAACC,KAAK,EAAE,GAAG;EAAEC,MAAM,EAAC;AAAG,CAAC;AAErC,MAAMC,MAAM,GAAG,QAAgB;EAAA;EAAA,IAAf;IAACC;EAAQ,CAAC;EACxB,MAAMC,SAAS,GAAGT,MAAM,EAAE;EAC1B,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,EAAE;EAC5C,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,IAAIgB,IAAI,EAAE,CAAC;EAC1D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAM;IAACmB,YAAY;IAAEC,SAAS;IAACC;EAAY,CAAC,GAAGjB,SAAS,EAAE;;EAE1D;EACA,MAAMkB,SAAS,GAAG,MAAK;IACrBD,YAAY,CAAC,KAAK,CAAC;IACnBV,SAAS,CAACY,OAAO,CAACC,cAAc,CAACC,UAAU,EAAE;EAC/C,CAAC;EAED,MAAMC,YAAY,GAAIC,EAAE,IAAI;IAAE;IAC5B,OAAO,CAAC,CAAC,GAAGA,EAAE,IAAEA,EAAE,GAAC,CAAC,CAAC,GAAC,CAAC,IAAE,IAAI;EAC/B,CAAC;EAED1B,SAAS,CAAC,MAAI;IACZ;IACAU,SAAS,CAACY,OAAO,CAACC,cAAc,CAACI,SAAS,EAAE;IAC5CjB,SAAS,CAACY,OAAO,CAACC,cAAc,CAACC,UAAU,EAAE;IAE7Cd,SAAS,CAACY,OAAO,CAACC,cAAc,CAACK,SAAS,CAAC,GAAG,CAAC;EACjD,CAAC,EAAC,EAAE,CAAC;;EAEL;EACA5B,SAAS,CAAC,MAAI;IACZ,IAAG,CAACU,SAAS,CAACY,OAAO,EAAE;IACvB,IAAGH,SAAS,EAAC;MACXT,SAAS,CAACY,OAAO,CAACC,cAAc,CAACM,MAAM,CAACX,YAAY,CAACY,MAAM,CAAC;MAC5DpB,SAAS,CAACY,OAAO,CAACC,cAAc,CAACI,SAAS,EAAE;MAC5C,IAAII,OAAO,GAAGtB,QAAQ,KAAKuB,SAAS,GAAEP,YAAY,CAAChB,QAAQ,CAAC,GAACO,QAAQ,GAAC,IAAI;MAC1EJ,YAAY,CAACqB,UAAU,CAACZ,SAAS,EAACU,OAAO,CAAC,CAAC,EAAC;MAC5CjB,cAAc,CAAC,IAAIC,IAAI,EAAE,CAAC;IAC5B,CAAC,MAAK;MACJL,SAAS,CAACY,OAAO,CAACC,cAAc,CAACC,UAAU,EAAE;MAC7CU,YAAY,CAACvB,SAAS,CAAC;IACzB;EACF,CAAC,EAAC,CAACQ,SAAS,CAAC,CAAC;EAEdnB,SAAS,CAAC,MAAI;IACZ,IAAGS,QAAQ,KAAKuB,SAAS,EAAE;IAC3B,MAAMG,WAAW,GAAG,CAAC,YAAU;MAC3B,MAAMC,eAAe,GAAG1B,SAAS,CAACY,OAAO,CAACC,cAAc,CAACY,WAAW,EAAE;MACtEC,eAAe,CAACC,IAAI,CAAEC,CAAC,IAAG;QACxBrB,WAAW,CAACsB,IAAI,CAACC,KAAK,CAACF,CAAC,GAAGpB,YAAY,CAACY,MAAM,CAAC,CAAC;MAChD,CAAC,CACA;IAAA,CAAC,GAAG;;IAGX;EAEF,CAAC,EAAC,CAACpB,SAAS,CAAC,CAAC;;EAGd;EACAV,SAAS,CAAC,MAAI;IACZ,IAAGS,QAAQ,IAAI,CAAC,IAAIA,QAAQ,IAAIuB,SAAS,EAAE,OAAM,CAAC;IAClDE,YAAY,CAACvB,SAAS,CAAC;IACvB,IAAI8B,aAAa,GAAGhB,YAAY,CAAChB,QAAQ,CAAC,IAAK,IAAIM,IAAI,EAAE,GAAIF,WAAW,CAAC;IACzED,YAAY,CAACqB,UAAU,CAACZ,SAAS,EAACoB,aAAa,CAAC,CAAC;EACnD,CAAC,EAAE,CAAChC,QAAQ,CAAC,CAAC;EAEd,oBACE;IAAA,wBACE,QAAC,WAAW;MAAC,SAAS,EAAEU,SAAU;MAAC,QAAQ,EAAEV,QAAS;MAAC,QAAQ,EAAEO;IAAS;MAAA;MAAA;MAAA;IAAA,QAAE,eAC5E,QAAC,OAAO;MAAC,IAAI,EAAEX,IAAK;MAAC,OAAO,EAAEa,YAAY,CAACwB,EAAG;MAAC,OAAO,EAAE,MAAIC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAE;MAAC,GAAG,EAAElC;IAAU;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA,gBAClG;AAEP,CAAC;AAAA,GAtEKF,MAAM;EAAA,QAMqCL,SAAS;AAAA;AAAA,KANpDK,MAAM;AAwEZ,eAAeA,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module"}