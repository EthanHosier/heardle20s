{"ast":null,"code":"var _jsxFileName = \"/home/ethanh/Desktop/WORKING_TIMER_2010s_Heardle/src/components/GuessSong.js\",\n  _s = $RefreshSig$();\nimport { faMagnifyingGlass, faSquareXmark } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useEffect } from 'react';\nimport { useState, useRef } from 'react';\nimport Player from \"./Player\";\nimport raw from '../rsc/songs.txt';\nimport useGlobal from '../hooks/useGlobal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NUM_OF_BARS = 6;\nconst CUSTOM_WHITE = \"rgb(227, 227, 227)\";\nconst GuessSong = () => {\n  _s();\n  var _searchRef$current;\n  const {\n    correctSong,\n    setIsCorrect,\n    setHasPlayedToday,\n    isPlaying,\n    setIsPlaying\n  } = useGlobal();\n  const [songs, setSongs] = useState([]);\n  const [guesses, setGuesses] = useState(new Array(NUM_OF_BARS));\n  const [guessNum, setGuessNum] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [songMatches, setSongMatches] = useState([]);\n  const [searchBarFocused, setSearchBarFocused] = useState(false);\n  const searchRef = useRef();\n  useEffect(() => {\n    fetch(raw).then(r => r.text()).then(text => {\n      let s = JSON.parse(text);\n      setSongs(s);\n      //setSongMatches(s)\n    });\n\n    const storedGuesses = JSON.parse(localStorage.getItem(\"guesses\"));\n    if (!storedGuesses) {\n      setGuesses([\"\", \"\", \"\", \"\", \"\", \"\"]);\n      return;\n    }\n    setGuessNum(getPrevGuessNum(storedGuesses));\n    setGuesses(storedGuesses);\n  }, []);\n  const getPrevGuessNum = sgs => {\n    for (let i = 0; i < sgs.length; i++) {\n      if (sgs[i] == \"\") return i;\n    }\n  };\n\n  //runs every time current guess changes (TODO: Searches for matches)\n  useEffect(() => {\n    if (currentGuess == \"\") {\n      return;\n    }\n    //TODO: make this more efficient with tree / linked list type structure of popping songs on and off it instead of searching through all songs every time\n    setSongMatches(songs.filter(obj => {\n      let s = obj.song.toLowerCase();\n      let a = obj.artist.toLowerCase();\n      let g = currentGuess.toLowerCase();\n      return `${s} - ${a}`.includes(g);\n    }));\n  }, [currentGuess]);\n  useEffect(() => {\n    console.log({\n      songMatches\n    });\n  }, [songMatches]);\n  useEffect(() => {\n    localStorage.setItem(\"guesses\", JSON.stringify(guesses));\n  }, [guesses]);\n  const updateGuessesArray = x => {\n    setGuesses(guesses.map((e, i) => {\n      return i == guessNum ? x : e;\n    }));\n  };\n  const onSkip = () => {\n    updateGuessesArray(\"SKIPPED\");\n    setGuessNum(guessNum + 1);\n  };\n\n  //this may not correctly work asynchronously\n  const onSubmit = () => {\n    let answer = correctSong.name + \" - \" + correctSong.artist;\n    if (currentGuess === answer) {\n      setIsCorrect(true);\n      setHasPlayedToday(true);\n      localStorage.setItem(\"won-last\", true);\n      updateStats(guessNum + 1);\n      setIsPlaying(true);\n      return;\n    }\n    updateGuessesArray(currentGuess);\n    setGuessNum(guessNum + 1);\n    setCurrentGuess(\"\");\n  };\n\n  //guess of \"X\" corresponds to failure to guess\n  const updateStats = g => {\n    const stats = JSON.parse(localStorage.getItem(\"scores\"));\n    stats[g] += 1;\n    localStorage.setItem(\"scores\", JSON.stringify(stats));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"guess-song-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bars\",\n      children: guesses.map((g, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `guess-box ${guessNum == i ? \"active\" : \"\"}`,\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            id: \"square-x-icon\",\n            icon: faSquareXmark,\n            className: guessNum <= i ? \"invisible\" : guesses[i] != \"SKIPPED\" ? \"incorrect\" : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: g\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 19\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      songID: correctSong.id,\n      startOffset: correctSong.offset,\n      guessNum: guessNum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), searchBarFocused && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"search-overlay\",\n      onClick: () => setSearchBarFocused(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"guess-container\",\n      style: searchBarFocused ? {\n        border: `solid ${CUSTOM_WHITE} 1px`\n      } : {},\n      children: [currentGuess != \"\" && songMatches.length > 0 && searchBarFocused && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"song-matches\",\n        children: songMatches.slice(0, 10).map((e, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          id: `match${i}`,\n          className: \"song-match\",\n          onClick: () => {\n            setCurrentGuess(`${e.song} - ${e.artist}`);\n            setSearchBarFocused(false);\n          },\n          children: `${e.song} - ${e.artist}`\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"search-songs\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"searchbar\",\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            id: \"search-icon\",\n            icon: faMagnifyingGlass\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"searchbar\",\n          ref: searchRef,\n          autoComplete: \"off\",\n          onChange: e => setCurrentGuess(e.target.value),\n          value: currentGuess,\n          onFocus: () => setSearchBarFocused(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"submit-btns-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"skip\",\n        onClick: onSkip,\n        children: [\"Skip \", guessNum < 5 && `(+${guessNum + 1}s)`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"submit\",\n        onClick: onSubmit,\n        disabled: (searchRef === null || searchRef === void 0 ? void 0 : (_searchRef$current = searchRef.current) === null || _searchRef$current === void 0 ? void 0 : _searchRef$current.value) == \"\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(GuessSong, \"XqqTXmVL41tctQpJtF/FmeNEu3A=\", false, function () {\n  return [useGlobal];\n});\n_c = GuessSong;\nexport default GuessSong;\nvar _c;\n$RefreshReg$(_c, \"GuessSong\");","map":{"version":3,"names":["faMagnifyingGlass","faSquareXmark","FontAwesomeIcon","React","useEffect","useState","useRef","Player","raw","useGlobal","NUM_OF_BARS","CUSTOM_WHITE","GuessSong","correctSong","setIsCorrect","setHasPlayedToday","isPlaying","setIsPlaying","songs","setSongs","guesses","setGuesses","Array","guessNum","setGuessNum","currentGuess","setCurrentGuess","songMatches","setSongMatches","searchBarFocused","setSearchBarFocused","searchRef","fetch","then","r","text","s","JSON","parse","storedGuesses","localStorage","getItem","getPrevGuessNum","sgs","i","length","filter","obj","song","toLowerCase","a","artist","g","includes","console","log","setItem","stringify","updateGuessesArray","x","map","e","onSkip","onSubmit","answer","name","updateStats","stats","id","offset","border","slice","target","value","current"],"sources":["/home/ethanh/Desktop/WORKING_TIMER_2010s_Heardle/src/components/GuessSong.js"],"sourcesContent":["import { faMagnifyingGlass, faSquareXmark } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useEffect } from 'react'\nimport { useState, useRef } from 'react';\nimport Player from \"./Player\"\nimport raw from '../rsc/songs.txt';\nimport useGlobal from '../hooks/useGlobal';\n\n\nconst NUM_OF_BARS = 6\nconst CUSTOM_WHITE = \"rgb(227, 227, 227)\"\nconst GuessSong = () => {\n\n  const {correctSong, setIsCorrect, setHasPlayedToday, isPlaying,setIsPlaying} = useGlobal();\n\n  const [songs, setSongs] = useState([])\n  const [guesses, setGuesses] = useState(new Array(NUM_OF_BARS));\n  const [guessNum, setGuessNum] = useState(0)\n  const [currentGuess, setCurrentGuess] = useState(\"\")\n  const [songMatches, setSongMatches] = useState([])\n  const [searchBarFocused, setSearchBarFocused] = useState(false)\n\n  const searchRef = useRef();\n\n  useEffect(() =>{\n\n    fetch(raw)\n        .then(r => r.text())\n        .then(text => {\n          let s = JSON.parse(text);\n          setSongs(s);\n          //setSongMatches(s)\n        });\n    \n  \n    const storedGuesses = JSON.parse(localStorage.getItem(\"guesses\"));\n    if(!storedGuesses){\n      setGuesses([\"\",\"\",\"\",\"\",\"\",\"\"])\n      return\n    }\n\n    setGuessNum(getPrevGuessNum(storedGuesses))\n    setGuesses(storedGuesses)\n  }, [])\n\n  const getPrevGuessNum = (sgs) =>{\n    for (let i = 0; i<sgs.length; i++){\n      if (sgs[i] == \"\") return i;\n    }\n  }\n\n  //runs every time current guess changes (TODO: Searches for matches)\n  useEffect(() =>{\n    if(currentGuess == \"\"){\n      return;\n    }\n    //TODO: make this more efficient with tree / linked list type structure of popping songs on and off it instead of searching through all songs every time\n    setSongMatches(songs.filter(obj =>{\n      let s = obj.song.toLowerCase();\n      let a = obj.artist.toLowerCase(); \n      let g = currentGuess.toLowerCase();\n      return `${s} - ${a}`.includes(g);\n  }));\n  },[currentGuess])\n\n  useEffect(() =>{\n    console.log({songMatches})\n  }, [songMatches])\n\n  \n\n  useEffect(() =>{\n    localStorage.setItem(\"guesses\",JSON.stringify(guesses))\n  },[guesses])\n\n  const updateGuessesArray = (x) =>{\n    setGuesses(guesses.map((e,i) => {\n      return i == guessNum? x : e;\n    }))\n  }\n \n  const onSkip = () =>{\n    updateGuessesArray(\"SKIPPED\")\n    setGuessNum(guessNum + 1)\n  }\n\n  //this may not correctly work asynchronously\n  const onSubmit = () =>{\n    let answer = correctSong.name + \" - \" + correctSong.artist;\n    if(currentGuess === answer){\n      setIsCorrect(true)\n      setHasPlayedToday(true)\n      localStorage.setItem(\"won-last\",true)\n      updateStats(guessNum+1)\n      setIsPlaying(true)\n      return;\n    }\n    updateGuessesArray(currentGuess);\n    setGuessNum(guessNum + 1)\n    setCurrentGuess(\"\")\n  }\n\n  //guess of \"X\" corresponds to failure to guess\n  const updateStats = (g)=>{\n    const stats = JSON.parse(localStorage.getItem(\"scores\"))\n    stats[g] +=1\n    localStorage.setItem(\"scores\",JSON.stringify(stats));\n  }\n\n  return (\n    <div id=\"guess-song-container\">\n      <div className='bars'>\n        {guesses.map((g,i) =>{\n          return  <div className={`guess-box ${(guessNum == i) ? \"active\":\"\"}`} key={i}>\n            <FontAwesomeIcon id= \"square-x-icon\" icon = {faSquareXmark} className = {guessNum <= i ? \"invisible\" : (guesses[i] != \"SKIPPED\"? \"incorrect\":\"\")} /> \n            {/*className={currentGuess > i ? \"\":\"invisible\"}*/ }\n            <p>{g}</p>\n            </div>\n        })}\n      </div>\n      \n      <Player songID={correctSong.id} startOffset={correctSong.offset} guessNum={guessNum}/>\n\n      \n      \n      {searchBarFocused && <div id=\"search-overlay\" onClick={() => setSearchBarFocused(false)} />}\n\n      <div id=\"guess-container\" style={searchBarFocused? {  border: `solid ${CUSTOM_WHITE} 1px`} : {}}>\n        {currentGuess != \"\" && songMatches.length > 0 && searchBarFocused &&\n          <div id=\"song-matches\">\n            {songMatches.slice(0,10).map((e,i) =>\n            <div \n            id = {`match${i}`} \n            key={i} \n            className='song-match'\n            onClick = {() => {\n              setCurrentGuess(`${e.song} - ${e.artist}`)\n              setSearchBarFocused(false)\n            }}\n            >\n            {`${e.song} - ${e.artist}`}\n            </div>\n            )}\n          </div>\n        }\n        <div id=\"search-songs\" >\n          <label htmlFor=\"searchbar\">\n            <FontAwesomeIcon id=\"search-icon\" icon={faMagnifyingGlass} />\n          </label>\n          <input\n          type=\"text\"\n          id=\"searchbar\"\n          ref={searchRef}\n          autoComplete=\"off\"\n          onChange={(e) => setCurrentGuess(e.target.value)}\n          value={currentGuess}\n          onFocus={() => setSearchBarFocused(true)}\n          />\n        </div>\n      </div>\n\n\n      <div id=\"submit-btns-container\">\n        <button id=\"skip\" onClick={onSkip}>Skip {guessNum <5 && `(+${guessNum+1}s)`}</button>\n        <button id=\"submit\" onClick = {onSubmit} disabled={searchRef?.current?.value ==\"\"}>Submit</button>\n      </div>\n\n    </div>\n  )\n}\n\nexport default GuessSong"],"mappings":";;AAAA,SAASA,iBAAiB,EAAEC,aAAa,QAAQ,mCAAmC;AACpF,SAASC,eAAe,QAAQ,gCAAgC;AAChE,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,GAAG,MAAM,kBAAkB;AAClC,OAAOC,SAAS,MAAM,oBAAoB;AAAC;AAG3C,MAAMC,WAAW,GAAG,CAAC;AACrB,MAAMC,YAAY,GAAG,oBAAoB;AACzC,MAAMC,SAAS,GAAG,MAAM;EAAA;EAAA;EAEtB,MAAM;IAACC,WAAW;IAAEC,YAAY;IAAEC,iBAAiB;IAAEC,SAAS;IAACC;EAAY,CAAC,GAAGR,SAAS,EAAE;EAE1F,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAIiB,KAAK,CAACZ,WAAW,CAAC,CAAC;EAC9D,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACoB,YAAY,EAAEC,eAAe,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACwB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EAE/D,MAAM0B,SAAS,GAAGzB,MAAM,EAAE;EAE1BF,SAAS,CAAC,MAAK;IAEb4B,KAAK,CAACxB,GAAG,CAAC,CACLyB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,EAAE,CAAC,CACnBF,IAAI,CAACE,IAAI,IAAI;MACZ,IAAIC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;MACxBhB,QAAQ,CAACiB,CAAC,CAAC;MACX;IACF,CAAC,CAAC;;IAGN,MAAMG,aAAa,GAAGF,IAAI,CAACC,KAAK,CAACE,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;IACjE,IAAG,CAACF,aAAa,EAAC;MAChBlB,UAAU,CAAC,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC;MAC/B;IACF;IAEAG,WAAW,CAACkB,eAAe,CAACH,aAAa,CAAC,CAAC;IAC3ClB,UAAU,CAACkB,aAAa,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,eAAe,GAAIC,GAAG,IAAI;IAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAACD,GAAG,CAACE,MAAM,EAAED,CAAC,EAAE,EAAC;MAChC,IAAID,GAAG,CAACC,CAAC,CAAC,IAAI,EAAE,EAAE,OAAOA,CAAC;IAC5B;EACF,CAAC;;EAED;EACAxC,SAAS,CAAC,MAAK;IACb,IAAGqB,YAAY,IAAI,EAAE,EAAC;MACpB;IACF;IACA;IACAG,cAAc,CAACV,KAAK,CAAC4B,MAAM,CAACC,GAAG,IAAG;MAChC,IAAIX,CAAC,GAAGW,GAAG,CAACC,IAAI,CAACC,WAAW,EAAE;MAC9B,IAAIC,CAAC,GAAGH,GAAG,CAACI,MAAM,CAACF,WAAW,EAAE;MAChC,IAAIG,CAAC,GAAG3B,YAAY,CAACwB,WAAW,EAAE;MAClC,OAAQ,GAAEb,CAAE,MAAKc,CAAE,EAAC,CAACG,QAAQ,CAACD,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;EACH,CAAC,EAAC,CAAC3B,YAAY,CAAC,CAAC;EAEjBrB,SAAS,CAAC,MAAK;IACbkD,OAAO,CAACC,GAAG,CAAC;MAAC5B;IAAW,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAIjBvB,SAAS,CAAC,MAAK;IACboC,YAAY,CAACgB,OAAO,CAAC,SAAS,EAACnB,IAAI,CAACoB,SAAS,CAACrC,OAAO,CAAC,CAAC;EACzD,CAAC,EAAC,CAACA,OAAO,CAAC,CAAC;EAEZ,MAAMsC,kBAAkB,GAAIC,CAAC,IAAI;IAC/BtC,UAAU,CAACD,OAAO,CAACwC,GAAG,CAAC,CAACC,CAAC,EAACjB,CAAC,KAAK;MAC9B,OAAOA,CAAC,IAAIrB,QAAQ,GAAEoC,CAAC,GAAGE,CAAC;IAC7B,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMC,MAAM,GAAG,MAAK;IAClBJ,kBAAkB,CAAC,SAAS,CAAC;IAC7BlC,WAAW,CAACD,QAAQ,GAAG,CAAC,CAAC;EAC3B,CAAC;;EAED;EACA,MAAMwC,QAAQ,GAAG,MAAK;IACpB,IAAIC,MAAM,GAAGnD,WAAW,CAACoD,IAAI,GAAG,KAAK,GAAGpD,WAAW,CAACsC,MAAM;IAC1D,IAAG1B,YAAY,KAAKuC,MAAM,EAAC;MACzBlD,YAAY,CAAC,IAAI,CAAC;MAClBC,iBAAiB,CAAC,IAAI,CAAC;MACvByB,YAAY,CAACgB,OAAO,CAAC,UAAU,EAAC,IAAI,CAAC;MACrCU,WAAW,CAAC3C,QAAQ,GAAC,CAAC,CAAC;MACvBN,YAAY,CAAC,IAAI,CAAC;MAClB;IACF;IACAyC,kBAAkB,CAACjC,YAAY,CAAC;IAChCD,WAAW,CAACD,QAAQ,GAAG,CAAC,CAAC;IACzBG,eAAe,CAAC,EAAE,CAAC;EACrB,CAAC;;EAED;EACA,MAAMwC,WAAW,GAAId,CAAC,IAAG;IACvB,MAAMe,KAAK,GAAG9B,IAAI,CAACC,KAAK,CAACE,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACxD0B,KAAK,CAACf,CAAC,CAAC,IAAG,CAAC;IACZZ,YAAY,CAACgB,OAAO,CAAC,QAAQ,EAACnB,IAAI,CAACoB,SAAS,CAACU,KAAK,CAAC,CAAC;EACtD,CAAC;EAED,oBACE;IAAK,EAAE,EAAC,sBAAsB;IAAA,wBAC5B;MAAK,SAAS,EAAC,MAAM;MAAA,UAClB/C,OAAO,CAACwC,GAAG,CAAC,CAACR,CAAC,EAACR,CAAC,KAAI;QACnB,oBAAQ;UAAK,SAAS,EAAG,aAAarB,QAAQ,IAAIqB,CAAC,GAAI,QAAQ,GAAC,EAAG,EAAE;UAAA,wBACnE,QAAC,eAAe;YAAC,EAAE,EAAE,eAAe;YAAC,IAAI,EAAI3C,aAAc;YAAC,SAAS,EAAIsB,QAAQ,IAAIqB,CAAC,GAAG,WAAW,GAAIxB,OAAO,CAACwB,CAAC,CAAC,IAAI,SAAS,GAAE,WAAW,GAAC;UAAI;YAAA;YAAA;YAAA;UAAA,QAAG,eAEpJ;YAAA,UAAIQ;UAAC;YAAA;YAAA;YAAA;UAAA,QAAK;QAAA,GAH+DR,CAAC;UAAA;UAAA;UAAA;QAAA,QAIpE;MACV,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QACE,eAEN,QAAC,MAAM;MAAC,MAAM,EAAE/B,WAAW,CAACuD,EAAG;MAAC,WAAW,EAAEvD,WAAW,CAACwD,MAAO;MAAC,QAAQ,EAAE9C;IAAS;MAAA;MAAA;MAAA;IAAA,QAAE,EAIrFM,gBAAgB,iBAAI;MAAK,EAAE,EAAC,gBAAgB;MAAC,OAAO,EAAE,MAAMC,mBAAmB,CAAC,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG,eAE3F;MAAK,EAAE,EAAC,iBAAiB;MAAC,KAAK,EAAED,gBAAgB,GAAE;QAAGyC,MAAM,EAAG,SAAQ3D,YAAa;MAAK,CAAC,GAAG,CAAC,CAAE;MAAA,WAC7Fc,YAAY,IAAI,EAAE,IAAIE,WAAW,CAACkB,MAAM,GAAG,CAAC,IAAIhB,gBAAgB,iBAC/D;QAAK,EAAE,EAAC,cAAc;QAAA,UACnBF,WAAW,CAAC4C,KAAK,CAAC,CAAC,EAAC,EAAE,CAAC,CAACX,GAAG,CAAC,CAACC,CAAC,EAACjB,CAAC,kBACjC;UACA,EAAE,EAAK,QAAOA,CAAE,EAAE;UAElB,SAAS,EAAC,YAAY;UACtB,OAAO,EAAI,MAAM;YACflB,eAAe,CAAE,GAAEmC,CAAC,CAACb,IAAK,MAAKa,CAAC,CAACV,MAAO,EAAC,CAAC;YAC1CrB,mBAAmB,CAAC,KAAK,CAAC;UAC5B,CAAE;UAAA,UAEA,GAAE+B,CAAC,CAACb,IAAK,MAAKa,CAAC,CAACV,MAAO;QAAC,GAPrBP,CAAC;UAAA;UAAA;UAAA;QAAA,QAQA;MACL;QAAA;QAAA;QAAA;MAAA,QACG,eAER;QAAK,EAAE,EAAC,cAAc;QAAA,wBACpB;UAAO,OAAO,EAAC,WAAW;UAAA,uBACxB,QAAC,eAAe;YAAC,EAAE,EAAC,aAAa;YAAC,IAAI,EAAE5C;UAAkB;YAAA;YAAA;YAAA;UAAA;QAAG;UAAA;UAAA;UAAA;QAAA,QACvD,eACR;UACA,IAAI,EAAC,MAAM;UACX,EAAE,EAAC,WAAW;UACd,GAAG,EAAE+B,SAAU;UACf,YAAY,EAAC,KAAK;UAClB,QAAQ,EAAG8B,CAAC,IAAKnC,eAAe,CAACmC,CAAC,CAACW,MAAM,CAACC,KAAK,CAAE;UACjD,KAAK,EAAEhD,YAAa;UACpB,OAAO,EAAE,MAAMK,mBAAmB,CAAC,IAAI;QAAE;UAAA;UAAA;UAAA;QAAA,QACvC;MAAA;QAAA;QAAA;QAAA;MAAA,QACE;IAAA;MAAA;MAAA;MAAA;IAAA,QACF,eAGN;MAAK,EAAE,EAAC,uBAAuB;MAAA,wBAC7B;QAAQ,EAAE,EAAC,MAAM;QAAC,OAAO,EAAEgC,MAAO;QAAA,oBAAOvC,QAAQ,GAAE,CAAC,IAAK,KAAIA,QAAQ,GAAC,CAAE,IAAG;MAAA;QAAA;QAAA;QAAA;MAAA,QAAU,eACrF;QAAQ,EAAE,EAAC,QAAQ;QAAC,OAAO,EAAIwC,QAAS;QAAC,QAAQ,EAAE,CAAAhC,SAAS,aAATA,SAAS,6CAATA,SAAS,CAAE2C,OAAO,uDAAlB,mBAAoBD,KAAK,KAAG,EAAG;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB;IAAA;MAAA;MAAA;MAAA;IAAA,QAC9F;EAAA;IAAA;IAAA;IAAA;EAAA,QAEF;AAEV,CAAC;AAAA,GA9JK7D,SAAS;EAAA,QAEkEH,SAAS;AAAA;AAAA,KAFpFG,SAAS;AAgKf,eAAeA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module"}