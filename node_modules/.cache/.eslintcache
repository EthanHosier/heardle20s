[{"/home/ethanh/Desktop/reactjs/heardle20s/src/index.js":"1","/home/ethanh/Desktop/reactjs/heardle20s/src/App.js":"2","/home/ethanh/Desktop/reactjs/heardle20s/src/context/GlobalProvider.js":"3","/home/ethanh/Desktop/reactjs/heardle20s/src/components/Layout.js":"4","/home/ethanh/Desktop/reactjs/heardle20s/src/hooks/useGlobal.js":"5","/home/ethanh/Desktop/reactjs/heardle20s/src/components/LinkedIn.js":"6","/home/ethanh/Desktop/reactjs/heardle20s/src/components/Header.js":"7","/home/ethanh/Desktop/reactjs/heardle20s/src/components/SongPage.js":"8","/home/ethanh/Desktop/reactjs/heardle20s/src/components/GuessSong.js":"9","/home/ethanh/Desktop/reactjs/heardle20s/src/components/AboutPop.js":"10","/home/ethanh/Desktop/reactjs/heardle20s/src/components/StatsPop.js":"11","/home/ethanh/Desktop/reactjs/heardle20s/src/components/Player.js":"12","/home/ethanh/Desktop/reactjs/heardle20s/src/components/HowToPlayPop.js":"13","/home/ethanh/Desktop/reactjs/heardle20s/src/components/SharePop.js":"14","/home/ethanh/Desktop/reactjs/heardle20s/src/components/ShareButton.js":"15","/home/ethanh/Desktop/reactjs/heardle20s/src/components/ProgressBar.js":"16"},{"size":322,"mtime":1671560099158,"results":"17","hashOfConfig":"18"},{"size":3152,"mtime":1671560099158,"results":"19","hashOfConfig":"18"},{"size":783,"mtime":1671560099158,"results":"20","hashOfConfig":"18"},{"size":1022,"mtime":1672537851606,"results":"21","hashOfConfig":"18"},{"size":181,"mtime":1671560099158,"results":"22","hashOfConfig":"18"},{"size":385,"mtime":1672007422610,"results":"23","hashOfConfig":"18"},{"size":2234,"mtime":1671560099158,"results":"24","hashOfConfig":"18"},{"size":1818,"mtime":1671560099158,"results":"25","hashOfConfig":"18"},{"size":5048,"mtime":1671560099158,"results":"26","hashOfConfig":"18"},{"size":531,"mtime":1671560099158,"results":"27","hashOfConfig":"18"},{"size":1844,"mtime":1671560099158,"results":"28","hashOfConfig":"18"},{"size":2862,"mtime":1671560099158,"results":"29","hashOfConfig":"18"},{"size":967,"mtime":1671560099158,"results":"30","hashOfConfig":"18"},{"size":434,"mtime":1671560099158,"results":"31","hashOfConfig":"18"},{"size":1199,"mtime":1671560099158,"results":"32","hashOfConfig":"18"},{"size":1438,"mtime":1671560099158,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19rf52v",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},"/home/ethanh/Desktop/reactjs/heardle20s/src/index.js",[],[],"/home/ethanh/Desktop/reactjs/heardle20s/src/App.js",["91","92","93","94","95","96","97","98","99","100","101"],[],"import Layout from \"./components/Layout\";\nimport useGlobal from \"./hooks/useGlobal\";\nimport { useEffect,useState } from \"react\";\nimport YouTube from 'react-youtube';\nimport raw from './rsc/days-songs.txt';\n\n\nconst EMPTY_SCORES_OBJ = \n    {\n        1:0,\n        2:0,\n        3:0,\n        4:0,\n        5:0,\n        6:0,\n        \"X\":0\n    }\n\n//START DATE: 25/11/22 (have 19 queued including today)\nconst NUM_MS_IN_DAY = 86400000;\nconst STARTING_POINT = 1669248000000;\nconst OPTS = {width: \"0\", height:\"0\"}\n\nfunction App() {\n\n  const {setHasPlayedToday,setIsCorrect,playerRef, correctSong, setCorrectSong, setIsPlaying, setDuration,duration} = useGlobal();\n  const [t,setT] = useState(false)\n  const [ytReady, setYtReady] = useState(false);\n\n\n  const getCorrectSongIndex = () =>{\n    const today = new Date();\n    return Math.floor((today.getTime() - STARTING_POINT) / NUM_MS_IN_DAY)\n  }\n\n  useEffect(() =>{\n\n    fetch(raw)\n    .then(r => r.text())\n    .then(text => {\n      let s = JSON.parse(text);\n      setCorrectSong(s[getCorrectSongIndex()])\n   });\n\n    const lastStarted = new Date(localStorage.getItem(\"last-started\"))\n    const lastPlayed = new Date(localStorage.getItem(\"last-played\"))\n    const wonLast = JSON.parse(localStorage.getItem(\"won-last\"));\n\n    if(isToday(lastPlayed)){\n        setHasPlayedToday(true);\n        resetStoredGuesses();\n        setIsCorrect(wonLast)\n        return\n    }\n\n    if(!isToday(lastStarted)){\n        resetStoredGuesses();\n    }\n\n    localStorage.setItem(\"last-started\", new Date())\n    \n    //check if scores in storage - if not, add them\n    localStorage.getItem(\"scores\") == null && localStorage.setItem(\"scores\", JSON.stringify(EMPTY_SCORES_OBJ))  \n  \n},[])\n\n\n  const isToday = (someDate) => {\n    const today = new Date()\n    return someDate?.getDate() == today.getDate() &&\n      someDate?.getMonth() == today.getMonth() &&\n      someDate?.getFullYear() == today.getFullYear()\n  }\n  const resetStoredGuesses = () =>{\n    localStorage.setItem(\"guesses\", JSON.stringify(['','','','','','']))\n}\n\n  const onReady = () =>{\n    const ip = playerRef.current.internalPlayer;\n    ip.playVideo();\n\n  }\n\n  const onStateChange =(e) =>{\n    if(e.data ==2){\n      setIsPlaying(false)\n      return\n    }\n    \n    \n    if(e.data == 1) {\n      setIsPlaying(true)\n      return\n    }\n    \n    if(ytReady && e.data == 3){\n      setIsPlaying(false)\n      return\n    }\n\n    if(e.data != -1 || ytReady) return\n    if(!t){\n      setT(true)\n      return\n    }\n\n   const ip = playerRef.current.internalPlayer;\n   const getDuration = (async() =>{\n    const durationPromise = playerRef.current.internalPlayer.getDuration()\n    durationPromise.then((d)=>{\n      setDuration(Math.floor(d - correctSong.offset))\n      setYtReady(true)\n    }\n    )})();\n   \n  } \n\n  return ( \n    <>\n\n    {correctSong? \n    <div id=\"App\">\n      <YouTube opts={OPTS} onReady={onReady} videoId={correctSong.id} ref={playerRef} onStateChange={onStateChange} id=\"yt player\" />\n      {!ytReady\n      ?<div id=\"loader-container\"><div className=\"loader\"></div></div>\n      : <Layout />\n      }  \n    </div>\n    \n    : <></>\n}\n    </>\n  );\n}\n\nexport default App;\n","/home/ethanh/Desktop/reactjs/heardle20s/src/context/GlobalProvider.js",["102"],[],"import { createContext,useEffect,useRef,useState } from \"react\";\n\nconst GlobalContext = createContext({});\n\nexport const GlobalProvider = ({children}) =>{\n    \n    const [hasPlayedToday, setHasPlayedToday] = useState(false);\n    const [isCorrect, setIsCorrect] = useState(false);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [duration, setDuration] = useState(0)\n    const [correctSong, setCorrectSong] = useState(\"\") \n\n    const playerRef = useRef(); \n\n    return(\n        \n        <GlobalContext.Provider value={{correctSong, setCorrectSong,hasPlayedToday,setHasPlayedToday,isCorrect,setIsCorrect,isPlaying,setIsPlaying, playerRef, duration, setDuration}}>\n            {children}\n        </GlobalContext.Provider>\n        \n    )\n}\n\nexport default GlobalContext;","/home/ethanh/Desktop/reactjs/heardle20s/src/components/Layout.js",["103"],[],"/home/ethanh/Desktop/reactjs/heardle20s/src/hooks/useGlobal.js",[],[],"/home/ethanh/Desktop/reactjs/heardle20s/src/components/LinkedIn.js",["104","105","106"],[],"import React from 'react'\n\nconst url = \"https://www.linkedin.com/in/ethan-hosier-623474253/\"\nexport const LinkedIn = () => {\n  return (\n    <div id=\"linked-in\">\n      <a href = \"https://www.linkedin.com/in/ethan-hosier-623474253/\" target={\"_blank\"}>\n        <img src='https://cdn-icons-png.flaticon.com/512/174/174857.png'/>\n        <p>Ethan Hosier</p>\n      </a>\n      </div>\n    )\n}\n","/home/ethanh/Desktop/reactjs/heardle20s/src/components/Header.js",[],[],"/home/ethanh/Desktop/reactjs/heardle20s/src/components/SongPage.js",["107","108"],[],"import React, { useEffect } from 'react'\nimport useGlobal from '../hooks/useGlobal'\nimport Player from './Player';\nimport ShareButton from './ShareButton';\n\nconst CORRECT_H1 = \"Well Done!\"\nconst CORRECT_H2 = \"You guessed today's Heardle 20s. Come back tomorrow to keep the current streak!\"\nconst INCORRECT_H1 = \"Better luck next time!\"\nconst INCORRECT_H2 = \"You didn't get today's Heardle 20s, but try again tomorrow!\"\nconst SongPage = () => {\n    const {correctSong, isCorrect} = useGlobal();\n    \n    const imgURL = `https://img.youtube.com/vi/${correctSong.id}/maxresdefault.jpg`\n\n    const openInNewTab = url => {\n        window.open(url, '_blank', 'noopener,noreferrer');\n    };\n\n\n    //on mount\n    useEffect(() => {\n        localStorage.setItem(\"last-played\", new Date());\n    },[])\n   \n    return (\n        <div id=\"songpage-container\">\n            <div id=\"song-box\" onClick={() => openInNewTab(`https://youtu.be/${correctSong.id}&t=${Math.floor(correctSong.offset)}`)}>\n                <div id=\"img-text-container\">    \n                    <img src={imgURL} id=\"thumbnail-img\"/>\n                    <div id=\"name-and-artist\">\n                        <p>{correctSong.name}</p>\n                        <p id='song-artist'>{correctSong.artist}</p>\n                    </div>\n                </div>\n                <img src={\"https://cdn-icons-png.flaticon.com/512/1384/1384060.png\"} id=\"yt-icon\"></img>\n            </div>\n            <h1>{isCorrect? CORRECT_H1:INCORRECT_H1} </h1>\n            <div id=\"dashes-container\">\n                {[...Array(6)].map((x, i) => <div className=\"dash\" key={i}/>)}\n            </div>\n            <h2>{isCorrect? CORRECT_H2:INCORRECT_H2}</h2>\n            <ShareButton/>\n            <Player/>            \n            \n            \n        </div>\n    )\n}\n\nexport default SongPage","/home/ethanh/Desktop/reactjs/heardle20s/src/components/GuessSong.js",["109","110","111","112","113","114","115","116","117"],[],"import { faMagnifyingGlass, faSquareXmark } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useEffect } from 'react'\nimport { useState, useRef } from 'react';\nimport Player from \"./Player\"\nimport raw from '../rsc/songs.txt';\nimport useGlobal from '../hooks/useGlobal';\n\n\nconst NUM_OF_BARS = 6\nconst CUSTOM_WHITE = \"rgb(227, 227, 227)\"\nconst GuessSong = () => {\n\n  const {correctSong, setIsCorrect, setHasPlayedToday, isPlaying,setIsPlaying} = useGlobal();\n\n  const [songs, setSongs] = useState([])\n  const [guesses, setGuesses] = useState(new Array(NUM_OF_BARS));\n  const [guessNum, setGuessNum] = useState(0)\n  const [currentGuess, setCurrentGuess] = useState(\"\")\n  const [songMatches, setSongMatches] = useState([])\n  const [searchBarFocused, setSearchBarFocused] = useState(false)\n\n  const searchRef = useRef();\n\n  useEffect(() =>{\n\n    fetch(raw)\n        .then(r => r.text())\n        .then(text => {\n          let s = JSON.parse(text);\n          setSongs(s);\n          //setSongMatches(s)\n        });\n    \n  \n    const storedGuesses = JSON.parse(localStorage.getItem(\"guesses\"));\n    if(!storedGuesses){\n      setGuesses([\"\",\"\",\"\",\"\",\"\",\"\"])\n      return\n    }\n\n    setGuessNum(getPrevGuessNum(storedGuesses))\n    setGuesses(storedGuesses)\n  }, [])\n\n  const getPrevGuessNum = (sgs) =>{\n    for (let i = 0; i<sgs.length; i++){\n      if (sgs[i] == \"\") return i;\n    }\n  }\n\n  //runs every time current guess changes (TODO: Searches for matches)\n  useEffect(() =>{\n    if(currentGuess == \"\"){\n      return;\n    }\n    //TODO: make this more efficient with tree / linked list type structure of popping songs on and off it instead of searching through all songs every time\n    setSongMatches(songs.filter(obj =>{\n      let s = obj.song.toLowerCase();\n      let a = obj.artist.toLowerCase(); \n      let g = currentGuess.toLowerCase();\n      return `${s} - ${a}`.includes(g);\n  }));\n  },[currentGuess])\n\n\n  useEffect(() =>{\n    localStorage.setItem(\"guesses\",JSON.stringify(guesses))\n  },[guesses])\n\n  const updateGuessesArray = (x) =>{\n    setGuesses(guesses.map((e,i) => {\n      return i == guessNum? x : e;\n    }))\n  }\n \n  const onSkip = () =>{\n    updateGuessesArray(\"SKIPPED\")\n    setGuessNum(guessNum + 1)\n  }\n\n  //this may not correctly work asynchronously\n  const onSubmit = () =>{\n    let answer = correctSong.name + \" - \" + correctSong.artist;\n    if(currentGuess === answer){\n      setIsCorrect(true)\n      setHasPlayedToday(true)\n      localStorage.setItem(\"won-last\",true)\n      updateStats(guessNum+1)\n      setIsPlaying(true)\n      return;\n    }\n    updateGuessesArray(currentGuess);\n    setGuessNum(guessNum + 1)\n    setCurrentGuess(\"\")\n  }\n\n  //guess of \"X\" corresponds to failure to guess\n  const updateStats = (g)=>{\n    const stats = JSON.parse(localStorage.getItem(\"scores\"))\n    stats[g] +=1\n    localStorage.setItem(\"scores\",JSON.stringify(stats));\n  }\n\n  return (\n    <div id=\"guess-song-container\">\n      <div className='bars'>\n        {guesses.map((g,i) =>{\n          return  <div className={`guess-box ${(guessNum == i) ? \"active\":\"\"}`} key={i}>\n            <FontAwesomeIcon id= \"square-x-icon\" icon = {faSquareXmark} className = {guessNum <= i ? \"invisible\" : (guesses[i] != \"SKIPPED\"? \"incorrect\":\"\")} /> \n            {/*className={currentGuess > i ? \"\":\"invisible\"}*/ }\n            <p>{g}</p>\n            </div>\n        })}\n      </div>\n      \n      <Player songID={correctSong.id} startOffset={correctSong.offset} guessNum={guessNum}/>\n\n      \n      \n      {searchBarFocused && <div id=\"search-overlay\" onClick={() => setSearchBarFocused(false)} />}\n\n      <div id=\"guess-container\" style={searchBarFocused? {  border: `solid ${CUSTOM_WHITE} 1px`} : {}}>\n        {currentGuess != \"\" && songMatches.length > 0 && searchBarFocused &&\n          <div id=\"song-matches\">\n            {songMatches.slice(0,10).map((e,i) =>\n            <div \n            id = {`match${i}`} \n            key={i} \n            className='song-match'\n            onClick = {() => {\n              setCurrentGuess(`${e.song} - ${e.artist}`)\n              setSearchBarFocused(false)\n            }}\n            >\n            {`${e.song} - ${e.artist}`}\n            </div>\n            )}\n          </div>\n        }\n        <div id=\"search-songs\" >\n          <label htmlFor=\"searchbar\">\n            <FontAwesomeIcon id=\"search-icon\" icon={faMagnifyingGlass} />\n          </label>\n          <input\n          type=\"text\"\n          id=\"searchbar\"\n          ref={searchRef}\n          autoComplete=\"off\"\n          onChange={(e) => setCurrentGuess(e.target.value)}\n          value={currentGuess}\n          onFocus={() => setSearchBarFocused(true)}\n          />\n        </div>\n      </div>\n\n\n      <div id=\"submit-btns-container\">\n        <button id=\"skip\" onClick={onSkip}>Skip {guessNum <5 && `(+${guessNum+1}s)`}</button>\n        <button id=\"submit\" onClick = {onSubmit} disabled={searchRef?.current?.value ==\"\"}>Submit</button>\n      </div>\n\n    </div>\n  )\n}\n\nexport default GuessSong","/home/ethanh/Desktop/reactjs/heardle20s/src/components/AboutPop.js",[],[],"/home/ethanh/Desktop/reactjs/heardle20s/src/components/StatsPop.js",["118","119","120"],[],"import React, { useEffect, useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome' \nimport { faX } from '@fortawesome/free-solid-svg-icons'\n\n\nconst StatsPop = ({close}) => {\n  const [xVals, setXVals] = useState([])\n  const [yVals,setYVals] = useState([])\n\n  useEffect(()=>{\n    const stats = JSON.parse(localStorage.getItem(\"scores\"));\n    setXVals(Object.keys(stats));\n    setYVals(Object.values(stats));\n  },[])\n  \n  const getMaxValue = (arr) => {\n    let max = 0;\n    arr.forEach((e)=>{\n      max=Math.max(max,e)\n    })\n    return max;\n  }\n\n  const getTotalPlays = (arr) =>{\n    let total = 0\n    arr.forEach((e) => {\n      total += e;\n    })\n    return total;\n  }\n\n  return (\n    <div className='popup'>\n        <FontAwesomeIcon id=\"close\" icon={faX} onClick={close}/> \n        <h1>Stats</h1>\n        <div id=\"barchart\">\n          <div id= \"barchart-bars-container\">\n            {yVals.map((y,i)=> <div className='barchart-bar' style={{height: `${100*y/getMaxValue(yVals)}%`, backgroundColor: `${i ==6 && \"red\"}`}} key={i}>{y? y:\"\"}</div>)}\n          </div>\n          <div id=\"barchart-labels-container\">\n            {xVals.map((x,i)=> <p className='barchart-label' key={i} style={{color: `${i ==6 && \"red\"}`}}>{x==\"X\"?\"X\":`${x}°`}</p>)}\n          </div>\n          <div id= \"specific-stats\">\n            <div id=\"nums-stats\">\n              <p>{getTotalPlays(yVals)}</p>\n              <p>{getTotalPlays(yVals.slice(0, yVals.length-1))}</p>\n              <p>{getTotalPlays(yVals) && Math.round(100*getTotalPlays(yVals.slice(0, yVals.length-1)) /getTotalPlays(yVals))}%</p>\n            </div>\n            <div id=\"nums-stats-labels\">\n              <p>Played</p>\n              <p>Won</p>\n              <p>Win Rate</p>\n            </div>\n          </div>\n        </div>\n    </div>\n  )\n}\n\nexport default StatsPop","/home/ethanh/Desktop/reactjs/heardle20s/src/components/Player.js",["121","122","123","124","125","126","127"],[],"import React, { useState,useEffect } from 'react'\nimport useGlobal from '../hooks/useGlobal';\nimport ProgressBar from './ProgressBar';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircleStop, faCirclePlay } from '@fortawesome/free-solid-svg-icons';\n\nconst Player = ({guessNum}) => {\n  const [timeoutID, setTimeoutID] = useState()\n  const [timeStarted, setTimeStarted] = useState(new Date())\n\n  const {correctSong, isPlaying,setIsPlaying,playerRef, setHasPlayedToday, hasPlayedToday, duration} = useGlobal();\n\n  //handles song having been played for allocated time\n  \n  const stopSong = () => {\n    playerRef.current.internalPlayer.pauseVideo();\n    playerRef.current.internalPlayer.seekTo(correctSong.offset);\n  }\n\n  const playSong = () =>{\n    playerRef.current.internalPlayer.playVideo();\n    \n  }\n\n //guess of \"X\" corresponds to failure to guess correctly\n  const updateStats = (g)=>{\n    const stats = JSON.parse(localStorage.getItem(\"scores\"))\n    stats[g] +=1\n    localStorage.setItem(\"scores\",JSON.stringify(stats));\n  }\n\n\n  const getGuessTime = (gn) =>{ //returns guess-time for corresponding guess num in ms\n    return (1 + gn*(gn+1)/2)*1000 \n  }\n  \n  const onPlayClicked = () =>{\n    if(!isPlaying){ // play\n      playSong();\n      return\n    }\n    //stop song\n    stopSong();\n    \n  }\n  \n  useEffect(()=>{\n    playerRef.current.internalPlayer.setVolume(100);\n    playerRef.current.internalPlayer.seekTo(correctSong.offset);\n\n    if(hasPlayedToday) playerRef.current.internalPlayer.playVideo();\n\n    return () => {\n      playerRef.current.internalPlayer.seekTo(correctSong.offset)\n    }\n  },[])\n  \n  useEffect(() =>{\n    if (!isPlaying) {\n      clearTimeout(timeoutID);\n      return;\n    }\n    let playFor = guessNum !== undefined? getGuessTime(guessNum):duration*1000\n    setTimeoutID(setTimeout(stopSong,playFor)) //guess time secs -> ms\n    setTimeStarted(new Date())\n  }, [isPlaying])\n\n  //handles when the user skips while the song is playing (so keeps playing until new time slot)\n  useEffect(()=>{\n    if(guessNum == 0 || guessNum == undefined) return //when guessNum is first set\n    \n    if(guessNum > 5) \n    {\n      clearInterval(timeoutID)\n      playerRef.current.internalPlayer.pauseVideo();\n      setHasPlayedToday(true)\n      updateStats(\"X\")\n      return\n    }\n\n    if(!isPlaying) return;\n    clearTimeout(timeoutID);\n\n    let timeRemaining = getGuessTime(guessNum) - ((new Date()) - timeStarted);\n    setTimeoutID(setTimeout(stopSong,timeRemaining))\n  }, [guessNum])\n\n\n  return (\n    <>\n      <ProgressBar isPlaying={isPlaying} guessNum={guessNum} duration={guessNum === undefined? duration: 16 }/>\n      <button className=\"play-btn\">\n        <FontAwesomeIcon icon = {isPlaying? faCircleStop : faCirclePlay} id=\"play-icon\" onClick={onPlayClicked}/>\n      </button>\n    </>\n    )\n}\n\nexport default Player","/home/ethanh/Desktop/reactjs/heardle20s/src/components/HowToPlayPop.js",[],[],"/home/ethanh/Desktop/reactjs/heardle20s/src/components/SharePop.js",[],[],"/home/ethanh/Desktop/reactjs/heardle20s/src/components/ShareButton.js",["128"],[],"import React, {useRef} from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faShareNodes } from '@fortawesome/free-solid-svg-icons'\n\n\nconst SHARE_LINK = \"www.heardle20s.com\";\nconst ShareButton = () => {\n\n    const copyToClipboard = (text) =>{\n      \n      const unsecuredCopyToClipboard = (text) => {\n        const textArea = document.createElement(\"textarea\");\n        textArea.value = text;\n        textArea.setAttribute(\"id\",\"copyTA\")\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        try {\n          document.execCommand('copy');\n        } catch (err) {\n          console.error('Unable to copy to clipboard', err);\n        }\n        document.body.removeChild(textArea);\n      }\n\n      if (window.isSecureContext && navigator.clipboard) {\n        console.log(\"secure\")\n        navigator.clipboard.writeText(text);\n      } else {\n        unsecuredCopyToClipboard(text);\n        console.log(\"unsecure\")\n      }\n\n    }\n    return (\n    <>\n      <button id=\"cp-link\" onClick={() => copyToClipboard(SHARE_LINK)}> <FontAwesomeIcon icon={faShareNodes}/>Copy Link</button>\n    </>\n  )\n}\n\nexport default ShareButton","/home/ethanh/Desktop/reactjs/heardle20s/src/components/ProgressBar.js",["129"],[],"import React, { useState, useEffect } from 'react'\n\nconst WIDTH_PERCENTAGES = {\n  0:6.25,\n  1:12.5,\n  2:25,\n  3:43.75,\n  4:68.75,\n  5:100,\n}\n\nconst ProgressBar = ({isPlaying, guessNum,duration}) => {\n    //used to update elapsed time\n    const [intervalID,setIntervalID] = useState();\n    const [timeElapsed,setTimeElapsed] = useState();\n    \n\n    useEffect(() =>{\n    if(!isPlaying){\n      setTimeElapsed(0);\n      if(intervalID) clearInterval(intervalID);\n      return\n    }\n\n    let ms10 = 0;\n    setIntervalID(setInterval(()=>setTimeElapsed((++ms10)/10),100))\n  },[isPlaying])\n  \n    const getTimerFormat = (totalSecs)=>{\n        let mins = Math.floor(totalSecs/60)\n        let secs = Math.floor(totalSecs) % 60;\n\n        if (secs > 9) return `${mins}:${secs}`\n        else return `${mins}:0${secs}`\n    }\n\n    return (\n    <div id = \"progress\">\n      <div id=\"grey-bar\" style={{width:`${guessNum ===undefined? 100:WIDTH_PERCENTAGES[guessNum]}%`}}/>\n      <div id=\"progress-color\" style={{width:`${(100*timeElapsed /duration)}%`}}/>\n      <div id=\"progress-bar\">\n        <div id=\"contents\">\n          {guessNum !== undefined && [...Array(6)].map((x, i) =>\n             <div id={`p${i}`} key={i} className= \"partial-bar\"/>\n          )}\n        </div>\n      </div>\n      <div id=\"timers\">\n         <p>{getTimerFormat(timeElapsed)}</p>\n         <p>{getTimerFormat(duration)}</p>\n       </div>\n    </div>\n  )\n}\n\nexport default ProgressBar",{"ruleId":"130","severity":1,"message":"131","line":26,"column":107,"nodeType":"132","messageId":"133","endLine":26,"endColumn":115},{"ruleId":"134","severity":1,"message":"135","line":65,"column":3,"nodeType":"136","endLine":65,"endColumn":5,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":70,"column":32,"nodeType":"140","messageId":"141","endLine":70,"endColumn":34},{"ruleId":"138","severity":1,"message":"139","line":71,"column":28,"nodeType":"140","messageId":"141","endLine":71,"endColumn":30},{"ruleId":"138","severity":1,"message":"139","line":72,"column":31,"nodeType":"140","messageId":"141","endLine":72,"endColumn":33},{"ruleId":"138","severity":1,"message":"139","line":85,"column":15,"nodeType":"140","messageId":"141","endLine":85,"endColumn":17},{"ruleId":"138","severity":1,"message":"139","line":91,"column":15,"nodeType":"140","messageId":"141","endLine":91,"endColumn":17},{"ruleId":"138","severity":1,"message":"139","line":96,"column":26,"nodeType":"140","messageId":"141","endLine":96,"endColumn":28},{"ruleId":"138","severity":1,"message":"142","line":101,"column":15,"nodeType":"140","messageId":"141","endLine":101,"endColumn":17},{"ruleId":"130","severity":1,"message":"143","line":107,"column":10,"nodeType":"132","messageId":"133","endLine":107,"endColumn":12},{"ruleId":"130","severity":1,"message":"144","line":108,"column":10,"nodeType":"132","messageId":"133","endLine":108,"endColumn":21},{"ruleId":"130","severity":1,"message":"145","line":1,"column":24,"nodeType":"132","messageId":"133","endLine":1,"endColumn":33},{"ruleId":"146","severity":1,"message":"147","line":19,"column":9,"nodeType":"148","endLine":27,"endColumn":104},{"ruleId":"130","severity":1,"message":"149","line":3,"column":7,"nodeType":"132","messageId":"133","endLine":3,"endColumn":10},{"ruleId":"150","severity":1,"message":"151","line":7,"column":7,"nodeType":"148","messageId":"152","endLine":7,"endColumn":89,"fix":"153"},{"ruleId":"154","severity":1,"message":"155","line":8,"column":9,"nodeType":"148","endLine":8,"endColumn":75},{"ruleId":"154","severity":1,"message":"155","line":29,"column":21,"nodeType":"148","endLine":29,"endColumn":59},{"ruleId":"154","severity":1,"message":"155","line":35,"column":17,"nodeType":"148","endLine":35,"endColumn":99},{"ruleId":"130","severity":1,"message":"156","line":14,"column":56,"nodeType":"132","messageId":"133","endLine":14,"endColumn":65},{"ruleId":"138","severity":1,"message":"139","line":48,"column":18,"nodeType":"140","messageId":"141","endLine":48,"endColumn":20},{"ruleId":"138","severity":1,"message":"139","line":54,"column":21,"nodeType":"140","messageId":"141","endLine":54,"endColumn":23},{"ruleId":"134","severity":1,"message":"157","line":64,"column":5,"nodeType":"136","endLine":64,"endColumn":19,"suggestions":"158"},{"ruleId":"138","severity":1,"message":"139","line":73,"column":16,"nodeType":"140","messageId":"141","endLine":73,"endColumn":18},{"ruleId":"138","severity":1,"message":"139","line":109,"column":58,"nodeType":"140","messageId":"141","endLine":109,"endColumn":60},{"ruleId":"138","severity":1,"message":"142","line":110,"column":128,"nodeType":"140","messageId":"141","endLine":110,"endColumn":130},{"ruleId":"138","severity":1,"message":"142","line":124,"column":23,"nodeType":"140","messageId":"141","endLine":124,"endColumn":25},{"ruleId":"138","severity":1,"message":"139","line":160,"column":86,"nodeType":"140","messageId":"141","endLine":160,"endColumn":88},{"ruleId":"138","severity":1,"message":"139","line":38,"column":132,"nodeType":"140","messageId":"141","endLine":38,"endColumn":134},{"ruleId":"138","severity":1,"message":"139","line":41,"column":90,"nodeType":"140","messageId":"141","endLine":41,"endColumn":92},{"ruleId":"138","severity":1,"message":"139","line":41,"column":109,"nodeType":"140","messageId":"141","endLine":41,"endColumn":111},{"ruleId":"130","severity":1,"message":"159","line":11,"column":33,"nodeType":"132","messageId":"133","endLine":11,"endColumn":45},{"ruleId":"134","severity":1,"message":"160","line":54,"column":17,"nodeType":"132","endLine":54,"endColumn":24},{"ruleId":"134","severity":1,"message":"161","line":56,"column":5,"nodeType":"136","endLine":56,"endColumn":7,"suggestions":"162"},{"ruleId":"134","severity":1,"message":"163","line":66,"column":6,"nodeType":"136","endLine":66,"endColumn":17,"suggestions":"164"},{"ruleId":"138","severity":1,"message":"139","line":70,"column":17,"nodeType":"140","messageId":"141","endLine":70,"endColumn":19},{"ruleId":"138","severity":1,"message":"139","line":70,"column":34,"nodeType":"140","messageId":"141","endLine":70,"endColumn":36},{"ruleId":"134","severity":1,"message":"165","line":86,"column":6,"nodeType":"136","endLine":86,"endColumn":16,"suggestions":"166"},{"ruleId":"130","severity":1,"message":"167","line":1,"column":16,"nodeType":"132","messageId":"133","endLine":1,"endColumn":22},{"ruleId":"134","severity":1,"message":"168","line":27,"column":5,"nodeType":"136","endLine":27,"endColumn":16,"suggestions":"169"},"no-unused-vars","'duration' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setCorrectSong', 'setHasPlayedToday', and 'setIsCorrect'. Either include them or remove the dependency array.","ArrayExpression",["170"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'ip' is assigned a value but never used.","'getDuration' is assigned a value but never used.","'useEffect' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'url' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"171","text":"172"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'isPlaying' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'songs'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSongMatches' needs the current value of 'songs'.",["173"],"'setIsPlaying' is assigned a value but never used.","The ref value 'playerRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'playerRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'correctSong.offset', 'hasPlayedToday', and 'playerRef'. Either include them or remove the dependency array.",["174"],"React Hook useEffect has missing dependencies: 'duration', 'guessNum', 'stopSong', and 'timeoutID'. Either include them or remove the dependency array.",["175"],"React Hook useEffect has missing dependencies: 'isPlaying', 'playerRef', 'setHasPlayedToday', 'stopSong', 'timeStarted', and 'timeoutID'. Either include them or remove the dependency array.",["176"],"'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'intervalID'. Either include it or remove the dependency array.",["177"],{"desc":"178","fix":"179"},[248,248]," rel=\"noreferrer\"",{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [setCorrectSong, setHasPlayedToday, setIsCorrect]",{"range":"190","text":"191"},"Update the dependencies array to be: [currentGuess, songs]",{"range":"192","text":"193"},"Update the dependencies array to be: [correctSong.offset, hasPlayedToday, playerRef]",{"range":"194","text":"195"},"Update the dependencies array to be: [duration, guessNum, isPlaying, stopSong, timeoutID]",{"range":"196","text":"197"},"Update the dependencies array to be: [guessNum, isPlaying, playerRef, setHasPlayedToday, stopSong, timeStarted, timeoutID]",{"range":"198","text":"199"},"Update the dependencies array to be: [intervalID, isPlaying]",{"range":"200","text":"201"},[1699,1701],"[setCorrectSong, setHasPlayedToday, setIsCorrect]",[1958,1972],"[currentGuess, songs]",[1633,1635],"[correctSong.offset, hasPlayedToday, playerRef]",[1918,1929],"[duration, guessNum, isPlaying, stopSong, timeoutID]",[2514,2524],"[guessNum, isPlaying, playerRef, setHasPlayedToday, stopSong, timeStarted, timeoutID]",[568,579],"[intervalID, isPlaying]"]